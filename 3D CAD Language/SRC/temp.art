-sequenceDone
---
seq(__done, _C), _sig -> _C, _sig

-sequence 
_C1, _sig -> _C1P, _sigP
---
seq(_C1, _C2), _sig -> seq(_C1P, _C2), _sigP

-ifTrue 
---
if(True, _C1, _C2),_sig -> _C1, _sig

-ifFalse 
---
if(False, _C1, _C2),_sig -> _C2,_sig

-ifResolve
_E, _sig ->_EP, _sigP
---
if(_E,_C1,_C2),_sig -> if(_EP, _C1, _C2), _sigP

-while
---
while(_E, _C),_sig -> if(_E, seq(_C, while(_E,_C)), __done), _sig

-assign
_n |> __int32(_)   
---
assign(_X, _n), _sig -> __done, __put(_sig, _X, _n)

-assignResolve
_E, _sig -> _I, _sigP 
---
assign(_X,_E), _sig -> assign(_X, _I), _sigP


-variable
__get(_sig, _R) |> _Z
---
deref(_R),_sig -> _Z, _sig


-variable
__get(_sig, _R) |> _Z
---
deref(_R),_sig -> _Z, _sig

-gt
_n1 |> __int32(_) _n2 |> __int32(_)
---
gt(_n1, _n2),_sig ->  __gt(_n1, _n2),_sig 

-gtRight
_n |> __int32(_) _E2, _sig -> _I2,_sigP 
---
gt(_n, _E2),_sig -> gt(_n, _I2), _sigP


-gtLeft
_E1, _sig -> _I1, _sigP 
---
gt(_E1, _E2),_sig -> gt(_I1, _E2), _sigP



-ge
_n1 |> __real64(_) _n2 |> __real64(_)
---
ge(_n1, _n2),_sig ->  __ge(_n1, _n2),_sig 

-geRight
_n |> __real64(_) _E2, _sig -> _I2,_sigP 
---
ge(_n, _E2),_sig -> ge(_n, _I2), _sigP


-geLeft
_E1, _sig -> _I1, _sigP 
---
ge(_E1, _E2),_sig -> ge(_I1, _E2), _sigP





-ne
_n1 |> __int32(_) _n2 |> __int32(_)
---
ne(_n1, _n2),_sig ->  __ne(_n1, _n2),_sig

-neRight
_n |> __int32(_)  _E2, _sig -> _I2,_sigP 
---
ne(_n, _E2),_sig -> ne(_n, _I2), _sigP


-neLeft
_E1, _sig -> _I1, _sigP 
---
ne(_E1, _E2),_sig -> ne(_I1, _E2), _sigP

-sub
_n1 |> __int32(_) _n2 |> __int32(_)
---
sub(_n1, _n2),_sig ->  __sub(_n1, _n2),_sig

-subRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
sub(_n, _E2),_sig -> sub(_n, _I2), _sigP

-sub
_n1 |> __int32(_) _n2 |> __int32(_)
---
sub(_n1, _n2),_sig ->  __sub(_n1, _n2),_sig

-subRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
sub(_n, _E2),_sig -> sub(_n, _I2), _sigP


-subLeft
_E1,_sig -> _I1,_sigP
---
sub(_E1, _E2),_sig -> sub(_I1, _E2), _sigP


-add
_n1 |> __int32(_) _n2 |> __int32(_)
---
add(_n1, _n2),_sig ->  __add(_n1, _n2),_sig

-addRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
add(_n, _E2),_sig -> add(_n, _I2), _sigP



-addLeft
_E1,_sig -> _I1,_sigP
---
add(_E1, _E2),_sig -> add(_I1, _E2), _sigP

-div
_n1 |> __int32(_) _n2 |> __int32(_)
---
div(_n1, _n2),_sig ->  __div(_n1, _n2),_sig

-divRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
div(_n, _E2),_sig -> div(_n, _I2), _sigP


-divLeft
_E1,_sig -> _I1,_sigP
---
div(_E1, _E2),_sig -> div(_I1, _E2), _sigP


-mul
_n1 |> __int32(_) _n2 |> __int32(_)
---
mul(_n1, _n2),_sig ->  __mul(_n1, _n2),_sig

-mulRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
mul(_n, _E2),_sig -> mul(_n, _I2), _sigP


-mulLeft
_E1,_sig -> _I1,_sigP
---
mul(_E1, _E2),_sig -> mul(_I1, _E2), _sigP


-sphere
_P1 |> __int32(_)
---
sphere(_P1), _sig -> __user(1, _P1), _sig

-sphereEvaluate
_P1, _sig -> _P1E, _sigP
---
sphere(_P1), _sig -> sphere(_P1E), _sigP 

-cube
---
cube(_P1), _sig -> __user(2, _P1, _P1, _P1), _sig

-cubeEvaluate
_P1, _sig -> _P1E, _sigP
---
cube(_P1), _sig -> cube(_P1E), _sigP 

-cuboid
---
cuboid(_n1, _n2, _n3), _sig -> __user(2, _n1, _n2, _n3), _sig

-cuboidLeft
_P1, _P2, _P3, _sig -> _P1E, _P2, P3, _sigP
---
cuboid(_P1, _P2, _P3), _sig -> cuboid(_P1E, _P2, _P3), _sigP

-cuboidMiddle
_n1 |> __int32(_) _P2, _P3, _sig -> _P2E, _P3, _sigP
---
cuboid(_n1, _P2, _P3), _sig -> cuboid(_n1, _P2E, _P3), _sigP

-cuboidRight
_n1 |> __int32(_) _n2 |> __int32(_) _P3, _sig -> _P3E, _sigP
---
cuboid(_n1, _n2, _P3), _sig -> cuboid(_n1, _n2, _P3E), _sigP


-cylinder 
_n1 |> __int32(_) _n2 |> __int32(_)
--- 
cylinder(_n1, _n2), _sig -> __user(3, _n1, _n2), _sig 

-cylinderRight 
_n1 |> __int32(_) _P2, _sig -> _P2E, _sigP 
--- 
cylinder(_n1, _P2), _sig -> cylinder(_n1, _P2E), _sigP 

-cylinderLeft 
_P1, _P2, _sig -> _P1E, _P2, _sigP 
--- 
cylinder(_P1, _P2), _sig -> cylinder(_P1E, _P2), _sigP

-display
---
display(), _sig -> __user(4), _sig



-translate
_n1 |> __int32(_) _n2 |> __int32(_) _n3 |> __int32(_)
---
translate(_n1, _n2, _n3), _sig -> __user(5, _n1, _n2, _n3), _sig

-translateRight 
_n1 |> __int32(_) _n2 |> __int32(_) _P3, _sig -> _P3E, _sigP 
--- 
translate(_n1, _n2, _P3), _sig -> translate(_n1,_n2, _P3E), _sigP 


-translateMiddle 
_n1 |> __int32(_) _n2 |> __int32(_) _P3, _sig -> _P3E, _sigP 
--- 
translate(_n1, _P3, _n2), _sig -> translate(_n1, _P3E, _n2), _sigP 

-translateLeft 
_n1 |> __int32(_) _n2 |> __int32(_) _P1, _sig -> _P1E, _sigP 
--- 
translate(_P1, _n1, _n2), _sig -> translate(_P1E, _n1, _n2), _sigP


-translateLeftRight
_n1 |> __int32(_)  _P1, _P2, _sig -> _P1E, _P2, _sigP 
--- 
translate(_P1, _P2, _n1), _sig -> translate(_P1E, _P2, _n1), _sigP




-changeColour
_n1 |> __int32(_) _n2 |> __int32(_) _n3 |> __int32(_) _n4 |> __int32(_) _n5 |> __int32(_)
---
changeColour(_n1, _n2, _n3, _n4, _n5), _sig -> __user(6, _n1, _n2, _n3, _n4, _n5), _sig


-changeColourEvaluate
_n2 |> __int32(_) _n3 |> __int32(_) _n4 |> __int32(_) _n5 |> __int32(_) _P1, _sig -> _P1E, _sigP 
---
changeColour(_P1, _n2, _n3, _n4, _n5), _sig -> changeColour(_P1E, _n2, _n3, _n4, _n5), _sig


-scale
_n1 |> __int32(_) _n2 |> __int32(_)
---
scale(_n1, _n2), _sig -> __user(7, _n1, _n2), _sig

-scaleLeft
_n2 |> __int32(_) _P1, _sig -> _P1E, _sig
---
scale(_P1, _n2), _sig -> scale(_P1E, _n2), _sig


-scaleLeftRight
_n2 |> __int32(_) _P1, _sig -> _P1E, _sig
---
scale(_n2, _P1), _sig -> scale( _n2, _P1E), _sig


-scaleRight
_P1, _sig -> _P1E,  _sig
---
scale(_P1, _P2), _sig -> scale(_P1E, _P2), _sig





-duplicate
_n1 |> __int32(_)
---
duplicate(_n1), _sig -> __user(8, _n1), _sig

-duplicateEvaluate
_P1, _sig -> _P1E, _sig
---
duplicate(_P1), _sig -> duplicate(_P1E), _sig




!try seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(seq(assign(LeftGlass, cuboid(200, 100, 50)), translate(deref(LeftGlass), 300, 0)), changeColour(deref(LeftGlass), 50, 100, 100, 1)), assign(RightGlass, cuboid(200, 100, 50))), translate(deref(RightGlass), 800, 0)), changeColour(deref(RightGlass), 50, 100, 100, 1)), assign(Bridge, cuboid(300, 10, 50))), translate(deref(Bridge), 550, 0)), changeColour(deref(Bridge), 0, 0, 0, 1)), assign(Nose, cylinder(40, 200))), translate(deref(Nose), 550, 100)), changeColour(deref(Nose), 92, 64, 51, 1)), assign(NariceLeft, sphere(28))), translate(deref(NariceLeft), 523, 200)), changeColour(deref(NariceLeft), 92, 64, 51, 1)), assign(NariceRight, sphere(28))), translate(deref(NariceRight), 576, 200)), changeColour(deref(NariceRight), 92, 64, 51, 1)), assign(Mouth, cuboid(600, 30, 50))), translate(deref(Mouth), 550, 400)), changeColour(deref(Mouth), 200, 0, 0, 1)), display), __map 
